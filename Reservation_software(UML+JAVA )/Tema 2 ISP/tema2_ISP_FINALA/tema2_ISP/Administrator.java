// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package tema2_ISP;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Vector;
/************************************************************/
/**
 * 
 */
public class Administrator extends tema2_ISP.User {
	public static final int MAX_AGENTI = 1000;
	public Administrator(String email_user, String parola, String tip_utilizator) {
		// TODO Auto-generated constructor stub
		super(email_user, parola, tip_utilizator);
		System.out.println("Contul dvs de "+tip_utilizator+" a fost creat cu succes");
		nrAgentiCurenti = 0;
	}
	void loadPossibilities() {
		System.out.println("Aveti posibilitatea urmatoarelor operatii:");
		System.out.println("1.Schimbare username");
		System.out.println("2.Schimbare parola");
		System.out.println("3.Logout");
		System.out.println("4.Adauagare Agent Turism");
		System.out.println("5.Stergere Agent Turism");
		System.out.println("6.Generare View de Profit");
		System.out.println("7.Vizualizare agenti");
		System.out.println("8.Adaugare Oferta");
		System.out.println("9.Stergere Oferta");
		System.out.println("10.Afisare oferte din sistem");
		BufferedReader input_client = new BufferedReader(new InputStreamReader (System.in));
		String optiune_client;
		try {
				optiune_client = new String(input_client.readLine());
				switch(optiune_client) {
				case "1":{
					BufferedReader input_new_username= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti noul username: ");
					try {
						String new_username = new String(input_new_username.readLine());
						super.change_username(new_username);
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}	
					break;
					
				}
				case "2":{
					System.out.println("Introduceti noua parola:");
					BufferedReader input_new_parola= new BufferedReader(new InputStreamReader (System.in));
					try {
						String new_pass = new String(input_new_parola.readLine());
						super.setPass(new_pass);
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}	
					break;
				}
				case "3":{
					super.logout();
					break;
				}
				case "4":{
					String email_agent_nou = "";
					BufferedReader input_new_email= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti email-ul noului agent de turism: ");
					try {
						email_agent_nou = new String(input_new_email.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}
					
					
					String noua_parola = "";
					BufferedReader input_new_pass= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti parola noului agent de turism: ");
					try {
						noua_parola = new String(input_new_pass.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}
					
					this.adaugareAgent(email_agent_nou, noua_parola);
					this.afisareAgenti();
					break;
				}
				case "5":{
					String email_agent_vechi = "";
					BufferedReader input_old_email= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti email-ul vechiului agent de turism: ");
					try {
						email_agent_vechi = new String(input_old_email.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}	
					this.stergereAgent(email_agent_vechi);
					this.afisareAgenti();
					break;
				}
				case "6":{
					//TO_DO_LA_FINAL DACA AVEM TIMP,LEL
					this.generateProfitView();
					break;
				}
				case "7":{
					this.afisareAgenti();
					break;
				}
				case "8":{
					//Tip Oferta de la tastatura
					String tip_oferta = "";
					BufferedReader input_tip= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti tipul de oferta[M/A/H]: ");
					try {
						tip_oferta = new String(input_tip.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}
					//Stoc de la tastatura
					String stoc = "";
					BufferedReader input_stoc= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti stocul: ");
					try {
						stoc = new String(input_stoc.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}
					//Discount de la tastatura
					String discount = "";
					BufferedReader input_discount= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti discount-ul: ");
					try {
						discount = new String(input_discount.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}
					//Pret de la tastatura
					String pret = "";
					BufferedReader input_pret= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti pretul ofertei: ");
					try {
						pret = new String(input_pret.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}
					
					
					String detalii_oferta ="stoc: "+stoc +","+"discount: "+discount+","+"pret: "+pret+",";
					if(tip_oferta.equals("M")) {
						this.adaugareOferta(tema2_ISP.Categorie_Oferta.InchiriereMasina, detalii_oferta);
					}
					else if(tip_oferta.equals("A")) {
						this.adaugareOferta(tema2_ISP.Categorie_Oferta.RezervareBiletAvion, detalii_oferta);
					}
					else if(tip_oferta.equals("H")) {
						this.adaugareOferta(tema2_ISP.Categorie_Oferta.SejurHotel, detalii_oferta);
					}
					else {
						System.out.println("Nu ati introdus tipul corect de oferta!");
					}
					
					break;
				}
				case "9":{
					//codul_de_sters
					String cod_oferta = "";
					BufferedReader cod_offer= new BufferedReader(new InputStreamReader (System.in));
					System.out.println("Introduceti codul ofertei de sters: ");
					try {
						cod_oferta = new String(cod_offer.readLine());
					}
					catch(IOException e1) {
						e1.printStackTrace();
					}
					
					this.stergereOferta(cod_oferta);
					break;
				}
				case "10":{
					this.afisareOferte();
					break;
				}
				default:{
					super.exit();
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * 
	 */
	public static Vector<tema2_ISP.Oferte> oferte = new Vector<tema2_ISP.Oferte>(); 
	public static Vector<tema2_ISP.OferteBiletAvion> oferteAvion = new Vector<tema2_ISP.OferteBiletAvion>();
	public static Vector<tema2_ISP.OferteMasini> oferteMasini = new Vector<tema2_ISP.OferteMasini>();
	public static Vector<tema2_ISP.OferteSejurHotel> oferteHotele = new Vector<tema2_ISP.OferteSejurHotel>();
	
	
	public void adaugareOferta(tema2_ISP.Categorie_Oferta tip,String detalii_incluse) {
			
			//adaug Oferta si separat pentru filtrari etc 
			if(tip == tema2_ISP.Categorie_Oferta.InchiriereMasina) {
				tema2_ISP.OferteMasini oferta_masina = new tema2_ISP.OferteMasini(tip, detalii_incluse);
				//Marca
				System.out.println("Marca:");
				String Marca = "";
				Scanner scanner = new Scanner(System.in);
				Marca = scanner.nextLine();
				oferta_masina.setMarca(Marca);
				//NrLocuri
				System.out.println("Numarul de locuri:");
				String nrLocuri = "2";
				nrLocuri = scanner.nextLine();
				//scanner.close();
				//adaugare oferta
				oferta_masina.setNrLocuri(Integer.parseInt(nrLocuri));
				oferteMasini.add(oferta_masina);
				oferte.add(oferta_masina);
			}
			else if(tip == tema2_ISP.Categorie_Oferta.RezervareBiletAvion) {
				tema2_ISP.OferteBiletAvion oferta_bilet_avion = new tema2_ISP.OferteBiletAvion(tip, detalii_incluse);
				
				//Setare nrEscale
				String nrEscale= "0";
				System.out.println("Introduceti numarul de escale:");
				Scanner scanner = new Scanner(System.in);
				nrEscale = scanner.nextLine();
				oferta_bilet_avion.setNrEscale(Integer.parseInt(nrEscale));
				 
				//Setare Clasa Zbor
				String clasa= "Econom";
				System.out.println("Introduceti clasa de zbor pe care zborul o are[I/Business/Econom]: ");
				clasa = scanner.nextLine();
				oferta_bilet_avion.setClasa_zbor(clasa);
				
				//Setare Ora Plecare
				
				String oraZbor= "00:00";	
				System.out.println("Introduceti ora de plecare a zborului in formatul [hh:mm]: ");
				oraZbor = scanner.nextLine();
				oferta_bilet_avion.setOra_decolare(oraZbor);
				
				//Setare Destinatie avion
				String destZbor= "";
				System.out.println("Introduceti destinatia zborului: ");
				destZbor = scanner.nextLine();
				oferta_bilet_avion.setDestinatie(destZbor);
				
				//scanner.close();
				oferteAvion.add(oferta_bilet_avion);
				oferte.add(oferta_bilet_avion);
			}
			else if(tip == tema2_ISP.Categorie_Oferta.SejurHotel) {
				tema2_ISP.OferteSejurHotel oferta_hotel = new tema2_ISP.OferteSejurHotel(tip,detalii_incluse);
				
				//Tip Camera
				System.out.println("Tipul de camera:");
				String tipCamera= "Matrimoniale";
				Scanner scanner = new Scanner(System.in);
				tipCamera = scanner.nextLine();
				oferta_hotel.setTipCamera(tipCamera);
				
				//Facilitati
				System.out.println("Facilitatile incluse:");
				String facilitati="";
				facilitati = scanner.nextLine();
				oferta_hotel.setFacilitati(facilitati);
				
				//Locatie Hotel
				String locatie="";
				System.out.println("Locatia hotelului");
				locatie = scanner.nextLine();
				oferta_hotel.setLocatie(locatie);
				
				//scanner.close();
				oferteHotele.add(oferta_hotel);
				oferte.add(oferta_hotel);
			}
			
			System.out.println("Offer has been added");
	}
	public void stergereOferta(String cod_oferta) {
		Iterator<Oferte> value = oferte.iterator();
		Iterator<OferteSejurHotel> hotel_offers = oferteHotele.iterator();
		Iterator<OferteMasini> car_offers = oferteMasini.iterator();
		Iterator<OferteBiletAvion> flight_offers = oferteAvion.iterator();
		
		
        int index_removal = 0;        
        int index_removal_of_masina = 0;
        int index_removal_of_bilet_avion = 0;
        int index_removal_of_hotel = 0;
        
        
        //PT OFERTA IN GENERAL
        int index = 0;
        while (value.hasNext()) { 
        
           if(((Oferte) value.next()).getCod_oferta().equals(cod_oferta)) {
        	   index_removal = index;
           }
           index++;
        } 
        //PT FIECARE TIP DE OFERTA IN PARTE
        index = 0;
        while(hotel_offers.hasNext()) {
        	if(((OferteSejurHotel) hotel_offers.next()).getCod_oferta().equals(cod_oferta)) {
         	   index_removal_of_hotel = index;
            }
        	index++;
        }
        
        index = 0;
        while(car_offers.hasNext()) {
        	if(((OferteMasini) car_offers.next()).getCod_oferta().equals(cod_oferta)) {
        		index_removal_of_masina = index;
            }
        	index++;
        }
        
        index = 0;
        while(flight_offers.hasNext()) {
        	if(((OferteBiletAvion) flight_offers.next()).getCod_oferta().equals(cod_oferta)) {
        		index_removal_of_bilet_avion = index;
            }
        	index++;
        }
        
        //Afisare utilizator oferte ramase si mesaj corespunzator
		System.out.println("Offer has been deleted");
		if(oferte.isEmpty() == false) {
			oferte.remove(index_removal);
		}
		if(oferteAvion.isEmpty() == false) {
			oferteAvion.remove(index_removal_of_bilet_avion);
		}
		if(oferteMasini.isEmpty() == false) {
			oferteMasini.remove(index_removal_of_masina);
		}
		if(oferteHotele.isEmpty() == false) {
			oferteHotele.remove(index_removal_of_hotel);
		}
        this.afisareOferte();

	}
	public void afisareOferte() {
        Iterator<Oferte> value = oferte.iterator(); 
        System.out.println("Ofertele curente in sistem sunt: "); 
        while (value.hasNext()) { 
           ((Oferte) value.next()).generareDetaliiIncluse(); 
        }
	}
	public tema2_ISP.AgentTurism[] agentturism = new tema2_ISP.AgentTurism[MAX_AGENTI];
	public int nrAgentiCurenti;
	/**
	 * 
	 * @param Email 
	 * @param Parola 
	 */
	
	
	public void adaugareAgent(String Email, String Parola) {
		boolean exista = false;
		for(int index = 0; index < nrAgentiCurenti; index++) {
			if(agentturism[index].Email == Email && agentturism[index].getPass()==Parola) {
				System.out.println("Agentul exista deja!");
				exista = true;
			}
		}
		if(exista == false) {
			if(nrAgentiCurenti< MAX_AGENTI) {
				tema2_ISP.AgentTurism agent = new tema2_ISP.AgentTurism(Email,Parola,"AGENT");
				agentturism[nrAgentiCurenti++] = agent;
				tema2_ISP.Aplicatie.agenti_turism.add(agent);
			}
			else {
				System.out.println("Numarul maxim de agenti pe care ii puteti avea in subordine a fost atins!");
			}
		}
	}

	/**
	 * 
	 * @param Email 
	 */
	
	//NU STERG SI AGENTUL DIN SISTEM PENTRU CA E POSIBIL CA UN ALT ADMIN VIITOR SA VREA SA LUCREZE CU AGENTUL RESPECTIV
	public void stergereAgent(String Email) {
		boolean exista = false;
		int index_stergere = 0 ;
		for(int index = 0; index < nrAgentiCurenti; index++) {
			if(agentturism[index].Email.equals(Email)) {
				System.out.println("Agentul exista deja!");
				exista = true;
				index_stergere = index;
			}
		}
		
		if(exista == false) {
			System.out.println("Agentul pe care incercati sa il stergeti nu exista");
		}
		else {
			// If the array is empty 
	        // or the index is not in array range 
	        // return the original array 
	        if (agentturism == null
	            || index_stergere < 0
	            || index_stergere >= agentturism.length) { 
	        } 
	  
	        // Create another array of size one less 
	        tema2_ISP.AgentTurism[] anotherArray = new tema2_ISP.AgentTurism[agentturism.length - 1]; 
	  
	        // Copy the elements except the index 
	        // from original array to the other array 
	        for (int i = 0, k = 0; i < agentturism.length; i++) { 
	  
	            // if the index is 
	            // the removal element index 
	            if (i == index_stergere) { 
	                continue; 
	            } 
	  
	            // if the index is not 
	            // the removal element index 
	            anotherArray[k++] = agentturism[i]; 
	        } 
	        nrAgentiCurenti--;
			agentturism = anotherArray.clone();
		}
		
	}
	
	public void afisareAgenti() {
		for(int index = 0;index<nrAgentiCurenti;index++) {
			agentturism[index].afisareUser();
		}
	}

	/**
	 * 
	 */
	public void generateProfitView() {
		
		//TO_DO de final
	}
};
